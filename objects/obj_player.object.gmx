<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.009375*sprite_width;
hsp = 0;
vsp = 0;
jumpspeed = 0.21875*sprite_width;
movespeed = 0.125*sprite_width;

health = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get Player's Input
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_jump = keyboard_check_pressed(vk_space);

//React to Inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10)
    {
    vsp += grav;
    }
if (place_meeting(x,y+1, obj_wall))
    {
    vsp = key_jump * -jumpspeed;
    }

//Horizontal Collision
if (place_meeting(x+hsp, y, obj_wall))
    {
    while(!place_meeting(x+sign(hsp), y, obj_wall))
        {
        x += sign(hsp);
        }
    hsp = 0;
    }
x += hsp;

//Vertical Collision
if (place_meeting(x, y+vsp, obj_wall))
    {
    if vsp &gt;=8
        {
        health -= 1*vsp;
        }
    while(!place_meeting(x, y+sign(vsp), obj_wall))
        {
        y += sign(vsp);
        }
    vsp = 0;
    }
y +=vsp;

if health &lt;= 0
    {
    lives -= 1;
    health = 100;
    if lives &gt; 0
        {
        x = xstart;
        y = ystart;
        }
    else
        {
        lives = 3;
        room_goto(rm_menu);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over

lives -= 1;
health = 100;
if lives &gt; 0
    {
    x = xstart;
    y = ystart;
    }
else
    {
    lives = 3;
    room_goto(rm_menu);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Health Score

x2 = 635;
x1 = x2 - 128;
y1 = 5;
y2 = y1 + 32;
draw_healthbar(x1, y1, x2, y2, health, c_black, c_red, c_lime, 0, true, true);

//Draw Lives Score

var xGap = obj_player.sprite_width / 2;
for (i = 0; i &lt; lives; i++;)
   {
   draw_sprite(spr_player, -1, xGap, (obj_player.sprite_height / 2) + 5);
   xGap += obj_player.sprite_width * 1.2;
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
